x <- 0:9
x[1]
x[2]
x[10]
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
add2 <- function(x,y){
x + y
}
add2(3,5)
above <- function(x,n){
use <- x > n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n = 10){
use <- x > n
x[use]
}
above(x)
y<-3
g <- function(x){}
g <- function(x){ }
g <- function(x){ a <- 3
x+a+y
}
g(2)
Sys.time()
search()
cube <- function(x,n) {
x^3
}
cube(3)
x<-1:10
if(x>5){
x<- 0
}
x
f <- function(x){
source('~/.active-rstudio-document')
g <- function(y)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Users/310084562/Desktop/test.R')
source('C:/Users/310084562/Desktop/test.R')
source('C:/Users/310084562/Desktop/test.R')
source('C:/Users/310084562/Desktop/test.R')
source('C:/Users/310084562/Desktop/test.R')
x <- 5
y<- if(x<3){
NA
}else{
10
}
y
gwd
getwd
pwd
getwd()
source('~/JHU Coursera Data Science course/Course 2 Week 2/JB_week2_assignment.R')
getwd()
pollutantmean("specdata")
setwd("~/RAssign2/ProgrammingAssignment2")
A = matrix(
+   c(2, 4, 3, 1, 5, 7, 1, 12, 8),
+   nrow=2,
+   ncol=3,
+   byrow = TRUE)
A = matrix(
+   c(2, 4, 3, 1, 5, 7, 1, 12, 8),
+   nrow=3,
+   ncol=3,
+   byrow = TRUE)
A = matrix( c(2, 4, 3, 1, 5, 7, 1, 12, 8), nrow=3 ncol= 3 byrow = TRUE)
A = matrix( c(2, 4, 3, 1, 5, 7, 1, 12, 8), nrow=3, ncol= 3, byrow = TRUE)
A
solve(A)
A = matrix()
A
A <- NULL
A
A = matrix()
A
A <- matrix(data = NULL)
A <- matrix(data = NULL, nrow = 1, ncol = 1)
A <- matrix(data = NA, nrow = 1, ncol = 1)
A
A = matrix( c(2, 4, 3, 1, 5, 7, 1, 12, 8), nrow=3, ncol= 3, byrow = TRUE)
c <- solve(A,...)
c <- solve(A)
c
source('~/RAssign2/ProgrammingAssignment2/cachematrix.R')
c <- matrix(c(1,2,3),c(4,5,6),c(7,8,9))
c <- matrix(c(1,2,3,4,5,6,7,8,9), nrows=3,ncols=3)
c <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3,ncol=3)
c
Matrix_create <- makeCacheMatrix(c)
Matrix_create
Inverse_result <-cacheSolve(c)
c
source('~/RAssign2/ProgrammingAssignment2/cachematrix.R')
Matrix_create <- makeCacheMatrix(c)
Inverse_result <-cacheSolve(c)
is.recursive(Matrix_create)
Inverse_result <-cacheSolve(Matrix_create)
source('~/RAssign2/ProgrammingAssignment2/cachematrix.R')
Matrix_create <- makeCacheMatrix(c)
Inverse_result <-cacheSolve(Matrix_create)
solve(c)
c
c <- matrix(c(2,8,1,10,5,4,1,12,3), nrow=3,ncol=3)
Matrix_create <- makeCacheMatrix(c)
Inverse_result <-cacheSolve(Matrix_create)
Inverse_result
Inverse_result <-cacheSolve(Matrix_create)
c <- matrix(c(2,8,1,10,5,4,1,12,3), nrow=3,ncol=3)
Matrix_create <- makeCacheMatrix(c)
source('~/RAssign2/ProgrammingAssignment2/cachematrix.R')
c <- matrix(c(2,8,1,10,5,4,1,12,3), nrow=3,ncol=3)
Matrix_create <- makeCacheMatrix(c)
Inverse_result <-cacheSolve(Matrix_create)
Inverse_result <-cacheSolve(Matrix_create)
Inverse_result2 <-cacheSolve(Matrix_create)
source('~/RAssign2/ProgrammingAssignment2/cachematrix.R')
c <- matrix(c(2,8,1,10,5,4,1,12,3), nrow=3,ncol=3)
Matrix_create <- makeCacheMatrix(c)
Inverse_result <-cacheSolve(Matrix_create)
Inverse_result2 <-cacheSolve(Matrix_create)
I <- c %*% Inverse_result
I
c <- matrix(c(2,27,43,15,9,72,43,2,90,3,1,31,62,8,40,71),nrow = 4, ncol = 4)
Matrix_create <- makeCacheMatrix(c)
Inverse_result <-cacheSolve(Matrix_create)
Inverse_result2 <-cacheSolve(Matrix_create)
Inverse_result
c %*% Inverse_result
source('~/RAssign2/ProgrammingAssignment2/cachematrix.R')
